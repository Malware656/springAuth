package com.malware.springauth.controller;

import com.malware.springauth.exception.CustomException;
import com.malware.springauth.exception.SpringAuthenticationException;
import com.malware.springauth.model.User;
import com.malware.springauth.model.requestModel.RequestFromUser;
import com.malware.springauth.model.responseModel.ResponseToUser;
import com.malware.springauth.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.ConstraintViolationException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.UUID;

import static com.malware.springauth.Constant.*;

@Controller
public class CustomController {

    @Autowired
    private UserRepository userRepository;

    @RequestMapping(value = "/signup", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE)
    ResponseEntity<?> signUp(@RequestBody RequestFromUser user) throws ConstraintViolationException {
        User currentUser = userRepository.findByEmail(user.getEmail());
        if(currentUser != null) throw new SpringAuthenticationException(SpringAuthenticationException.ErrorMessages.USER_ALREADY_PRESENT);
        User castedUser = new User(user.getEmail(), user.getUsername(), user.getPassword());
        castedUser.setUid(getUniqueId());
        castedUser.setEmail(user.getEmail());
        userRepository.save(castedUser);
        ResponseToUser response = new ResponseToUser(SIGNUP_SUCCESS, HttpStatus.OK.value(), HttpStatus.OK, Calendar.getInstance().getTime());
        return ResponseEntity.accepted().body(response);
    }

    @RequestMapping(value = "/signin", method = RequestMethod.POST)
    ResponseEntity<?> login(@RequestBody RequestFromUser user){
        User currentUser = userRepository.findByEmail(user.getEmail());
        if(currentUser == null) throw new SpringAuthenticationException(SpringAuthenticationException.ErrorMessages.USERNAME_NOT_FOUND);
        if(currentUser.getUsername().equals(user.getUsername()) && currentUser.getPassword().equals(user.getPassword())){
            ResponseToUser response = new ResponseToUser(SIGNIN_SUCCESS, HttpStatus.OK.value(), HttpStatus.OK, Calendar.getInstance().getTime());
            response.setUserData(currentUser);
            return ResponseEntity.accepted().body(response);
        }
        throw new SpringAuthenticationException(SpringAuthenticationException.ErrorMessages.INCORRECT_USERNAME_OR_PASSWORD);
    }

    @RequestMapping(value = "/users", method = RequestMethod.GET)
    ResponseEntity<?> getAllUsers(){
        if(userRepository.findAll().isEmpty()){
            throw new CustomException(CustomException.ErrorMessage.EMPTY_LIST);
        }
        ResponseToUser response = new ResponseToUser(null, HttpStatus.OK.value(), HttpStatus.OK, Calendar.getInstance().getTime());
        response.setData((ArrayList<User>) userRepository.findAll());
        return ResponseEntity.accepted().body(response);
    }


    String getUniqueId(){
        return UUID.randomUUID().toString();
    }
}
